[{"content":"Установка Python Установка на Windows Я не буду долго зацикливаться на этом этапе. Скачать установщик можно на python.org. Если качать Python с других сайтов, можно подцепить вирус или троян. Скачивайте программы только с официальных сайтов. После загрузки отметьте Add to path и проследуйте инструкциям. В windows 10 может появиться предупреждение с кнопкой щита (Disable Length Limit ), стоит нажать на нее.\nУстановка на Linux Для каждого дистрибутива есть свой пакетный менеджер, попробуйте найти информацию в интернете\napt install python - ubuntu и другие системы, использующие apt pkg/apt install python - Термукс (если вы собираетесь использовать телефон) pacman -S python - arch linux и другие системы, использующие pacman yum install python - centos и другие системы, использующие yum dnf install python - fedora и другие системы, использующие dnf zypper install python - opensuse и другие системы, использующие zypper В случае ошибок прав используйте sudo в начале команды, что бы запустить процесс установки от имени администратора. В большинстве случаев вас попросят подтвердить операцию - введите Y и нажмите Enter.\nПроверка и интерактивный режим В постах, где используется \u0026raquo;\u0026gt; и \u0026hellip; - используется интерактивный режим. Язык питон интерпретируемый (так же как и javascript, например) - то есть каждое действие в языке сначала читается, потом сразу выполняется. В других (компилируемых) языках (c++, java, etc\u0026hellip;) сначала создается готовый файл, а потом его можно сразу запустить без дополнительных инструментов\nКомпилятор (англ. compiler - составитель, собиратель) читает всю программу целиком, делает ее перевод и создает законченный вариант программы на машинном языке, который затем и выполняется. Результат работы компилятора — бинарный исполняемый файл. Интерпретатор (англ. interpreter - истолкователь, устный переводчик) переводит и выполняет программу строка за строкой.\nКогда установка закончится, нужно проверить, что всё было сделано правильно. Для этого в командной строке наберите py (латиницей) или python и нажмите клавишу ввода. Если всё хорошо, в ответ Python вам напишет номер своей версии и сборки и предложит несколько команд для знакомства с собой: Пожалуй, самый простой способ запускать программы на языке Python - это вводить инструкции непосредственно в командной строке интерпретатора, которая иногда называется интерактивной оболочкой. Например, выведем на экран \u0026ldquo;hello world\u0026rdquo; и рассмотрим парочку примеров:\n1 2 3 4 5 6 7 8 9 \u0026gt;\u0026gt;\u0026gt; print(\u0026#34;Hello, world!\u0026#34;) Hello, world! \u0026gt;\u0026gt;\u0026gt; # Это комментарий, пайтон ничего не делает \u0026gt;\u0026gt;\u0026gt; # Или Попробуем вывести на экран число пять: \u0026gt;\u0026gt;\u0026gt; 5 5 \u0026gt;\u0026gt;\u0026gt; # Посчитаем 2+2*2: \u0026gt;\u0026gt;\u0026gt; 2+2*2 6 Заходя в пперед, есть более сложные операторы, которые требуют ввода на несколько строк, в таком случае, приглашение меняется с \u0026gt;\u0026gt;\u0026gt; на .... Этот режим продолжается до тех пор, пока вы не нажмете Enter, оставив пустую строку:\n1 2 3 4 5 6 \u0026gt;\u0026gt;\u0026gt; if 2+2*2 == 6: ... print(\u0026#34;Верно!\u0026#34;) ... else: ... print(\u0026#34;Неверно!\u0026#34;) ... Верно! Запуск файлов Алгоритм действий прост:\nСоздаем файл любым способом. Файл должен оканчиваться на .py. Например, hello.py. Запускаем терминал/консоль (или запускаем прямо в папке с файлом) Windows: Windows + R - Вводим cmd - Enter Linux Ctrl + Shift + T Передвигаемся к файлу Вариант 1: cd ПОЛНЫЙ_ПУТЬ_К_ФАЙЛУ cd C:\\Users\\Вася\\Desktop\\hello.py - Windows cd /home/user/hello.py - Linux Вариант 2: Постепенно предвижение cd ВЛОЖЕННАЯ_ПАПКА - перейти в папку cd .. - для передвижения на уровень вверх Linux ls / Windows dir - для просмотра содержимого папки Вводим команду для запуска файла Вариант 1: python hello.py - универсальный метод для запуска любого файла на Python Вариант 2: python3 hello.py - указываем, что используем имеено Python 3.x.x Вариант 3: py -3 hello.py - лучший метод для Windows Мои примеры будут приближены к Linux, поэтому мои действия:\n1 2 3 4 5 6 ~$ touch hello.py # Создаем файл ~$ nano hello.py # Открываем файл в редакторе nano, редактируем и сохраняем ~$ cat hello.py # Выводим содержимое файла print(\u0026#34;Hello, world!\u0026#34;) ~$ python hello.py # Запускаем файл Hello, world! Завершение Статья может быть моментами неточной. Я буду рад почитать ваши комментари :)\n","date":"2022-07-22T00:00:00Z","image":"https://kotaz.github.io/p/py01/00_placeholder_hu2c7e018ed9f753eaee0b80b8a0ca4196_10087_120x120_fill_q75_box_smart1.jpg","permalink":"https://kotaz.github.io/p/py01/","title":"Введение в Python"},{"content":"Начало работы с языком Сейчас большинство операций с кодом будет проводиться внутри файла. Если вы хотите повторить то, что происходит тут, создайте файл и пишите код туда. О том, как запустить файл, можно узнать в прошлом уроке.\nВывод Выводимые данные можно перечислять через запятую 1 2 3 4 5 print(\u0026#34;Hello, world!\u0026#34;) # Hello, world! print(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;) # A B print(1, 2, 3) # 1 2 3 print(True, False, None) # True False None print(\u0026#34;a\u0026#34;, 1, True) # a 1 True Так же можно проводить простые вычисления 1 2 3 4 5 6 7 8 9 print(1 + 2) # 3 print(1 + 2, 3 + 4) # 3 7 print(1 - 3) # -2 print(6 / 2) # 3.0 print(-3.1 * 2) # -6.2 print(3 ** 2) # 9 (3 в степени 2) print(3 ** 3) # 27 (3 в степени 3) print(13 // 5) # 2 (деление без остатка) print(13 % 5) # 3 (остаток от деления) Переменные Переменные - это место в памяти, куда можно сохранить данные. Переменные называются по принципу: \u0026lt;имя\u0026gt; = \u0026lt;значение\u0026gt;. Не смотря на поддержку русских названий переменных, рекомендуется использовать латинские названия. Для переменных, объектов, функций, это snake_case (маленькми буквами, слова отделяются нижним подчеркиванием), а для классов - CamelCase (большими буквами, первая буква большая).\n1 2 3 4 5 a = 1 + 2 # 3 b = \u0026#34;123\u0026#34; c = True d = None print(a, b, c, d) # 1 123 True None Ввод 1 2 name = input(\u0026#34;Введите ваше имя: \u0026#34;) # Вводим имя print(\u0026#34;Привет, \u0026#34;, name) # Выводим приветствие input - это функция, которая требует 1 аргумент, это строка, которая будет выведена перед вводом. Возвращает введенную строку. print - к слову, тоже функция, но на вход принимает любое количество аргументов, которые будут распечатаны. Возвращает None.\nТипы данных Основных типо данных несколько. Сейчас говорится не о всех\nТип Описание Пример int Целое число 123 float Число с плавающей точкой 1.23 str Строка \u0026ldquo;Hello, world!\u0026rdquo; bool Логическое значение True, False complex Комплексное число 1 + 2j none Значение не определено None list Список [1, 2, 3] set Множество {1, 2, 3} tuple Кортеж (1, 2, 3) dict Словарь {1: \u0026ldquo;one\u0026rdquo;, 2: \u0026ldquo;two\u0026rdquo;} Завершение Статья может быть моментами неточной. Я буду рад почитать ваши комментари :)\n","date":"2022-07-22T00:00:00Z","permalink":"https://kotaz.github.io/p/py02/","title":"Основы Python"},{"content":"Добро пожаловать Тут будут публиковаться различные гайды и курсы по различным темам\n","date":"2022-07-22T00:00:00Z","permalink":"https://kotaz.github.io/p/first/","title":"Первый пост"}]